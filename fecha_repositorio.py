#!/usr/bin/env python3
"""
üîí FECHA REPOSIT√ìRIO - Tornar Reposit√≥rio Privado
Automatiza a mudan√ßa de p√∫blico para privado via GitHub API
"""

import requests
import json
import os
from datetime import datetime
from dotenv import load_dotenv

# ================================
# üîß CONFIGURA√á√ïES
# ================================

# Carregar vari√°veis do arquivo .env do backend
load_dotenv('backend/.env')

# GitHub Personal Access Token (deve estar definido no backend/.env)
GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')

# Verificar se token foi carregado
if not GITHUB_TOKEN:
    print("‚ùå ERRO: GITHUB_TOKEN n√£o encontrado!")
    print("üí° Adicione GITHUB_TOKEN=seu_token no arquivo backend/.env")
    exit(1)

# Configura√ß√µes do reposit√≥rio
GITHUB_USERNAME = 'NineRocksLx'  # Substitua pelo seu username
REPO_NAME = '9-Rocks-Tours'       # Nome do reposit√≥rio
REPO_FULL_NAME = f"{GITHUB_USERNAME}/{REPO_NAME}"

# API URL
API_URL = f"https://api.github.com/repos/{REPO_FULL_NAME}"

def validar_token():
    """Verificar se o token √© v√°lido"""
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}',
        'Accept': 'application/vnd.github.v3+json'
    }
    
    response = requests.get('https://api.github.com/user', headers=headers)
    if response.status_code == 200:
        user_data = response.json()
        print(f"‚úÖ Token v√°lido - Usu√°rio: {user_data.get('login')}")
        return True
    else:
        print(f"‚ùå Token inv√°lido - Status: {response.status_code}")
        return False

def verificar_status_atual():
    """Verificar se o reposit√≥rio √© p√∫blico ou privado"""
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}',
        'Accept': 'application/vnd.github.v3+json'
    }
    
    response = requests.get(API_URL, headers=headers)
    if response.status_code == 200:
        repo_data = response.json()
        is_private = repo_data.get('private', False)
        visibility = "üîí PRIVADO" if is_private else "üåç P√öBLICO"
        print(f"üìä Status atual: {visibility}")
        return is_private
    else:
        print(f"‚ùå Erro ao verificar reposit√≥rio - Status: {response.status_code}")
        return None

def fechar_repositorio():
    """Tornar reposit√≥rio privado"""
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}',
        'Accept': 'application/vnd.github.v3+json',
        'Content-Type': 'application/json'
    }
    
    data = {
        'private': True
    }
    
    print(f"üîí Fechando reposit√≥rio {REPO_FULL_NAME}...")
    
    response = requests.patch(API_URL, headers=headers, data=json.dumps(data))
    
    if response.status_code == 200:
        print("‚úÖ SUCESSO! Reposit√≥rio agora √© PRIVADO")
        print("üîí Apenas voc√™ tem acesso")
        print(f"üïê Fechado em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # Log da a√ß√£o
        with open('repo_visibility_log.txt', 'a', encoding='utf-8') as f:
            f.write(f"{datetime.now().isoformat()} - FECHADO (privado)\n")
            
        return True
    else:
        print(f"‚ùå ERRO ao fechar reposit√≥rio - Status: {response.status_code}")
        try:
            error_data = response.json()
            print(f"üí¨ Mensagem: {error_data.get('message', 'Erro desconhecido')}")
        except:
            print(f"üí¨ Response: {response.text}")
        return False

def main():
    print("üîí FECHA REPOSIT√ìRIO - GitHub API")
    print("=" * 50)
    print(f"üìÇ Reposit√≥rio: {REPO_FULL_NAME}")
    print("")
    
    # Verificar token
    if not validar_token():
        print("‚ùå Configure um token v√°lido em GITHUB_TOKEN")
        print("üí° Adicionar no arquivo: backend/.env")
        return
    
    # Verificar status atual
    is_private = verificar_status_atual()
    if is_private is None:
        return
    
    if is_private:
        print("‚ÑπÔ∏è  Reposit√≥rio j√° √© PRIVADO")
        resposta = input("ü§î Quer continuar mesmo assim? (s/N): ").lower()
        if resposta != 's':
            print("üö´ Opera√ß√£o cancelada")
            return
    
    # Confirmar a√ß√£o
    print("\nüö® ATEN√á√ÉO: Esta a√ß√£o ir√°:")
    print("   ‚Ä¢ Tornar o reposit√≥rio PRIVADO")  
    print("   ‚Ä¢ Apenas voc√™ ter√° acesso")
    print("   ‚Ä¢ Links p√∫blicos deixar√£o de funcionar")
    
    confirmacao = input("\nüîí Confirma fechar o reposit√≥rio? (s/N): ").lower()
    
    if confirmacao == 's':
        if fechar_repositorio():
            print("\nüéâ Reposit√≥rio fechado com sucesso!")
            print("üí° Use 'abre_repositorio.py' para tornar p√∫blico novamente")
        else:
            print("\nüí• Falha ao fechar reposit√≥rio")
    else:
        print("üö´ Opera√ß√£o cancelada pelo usu√°rio")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüö´ Opera√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"\nüí• Erro inesperado: {e}")

# ================================
# üìã INSTRU√á√ïES DE USO:
# ================================
#
# 1. Criar Personal Access Token:
#    GitHub > Settings > Developer settings > Personal access tokens > Generate new token
#    Selecionar scope: 'repo' (Full control of private repositories)
#
# 2. Configurar token no backend/.env:
#    GITHUB_TOKEN=seu_token_aqui
#
# 3. Configurar username e repo name nas vari√°veis acima
#
# 4. IMPORTANTE: Instalar depend√™ncia:
#    pip install python-dotenv
#
# 5. Executar:
#    python fecha_repositorio.py
#
# 6. Confirmar a a√ß√£o quando solicitado
#
# ‚ö†Ô∏è  IMPORTANTE: Mantenha o token seguro no .env! N√£o fa√ßa commit dele.