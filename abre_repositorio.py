#!/usr/bin/env python3
"""
üåç ABRE REPOSIT√ìRIO - Tornar Reposit√≥rio P√∫blico  
Automatiza a mudan√ßa de privado para p√∫blico via GitHub API
"""

import requests
import json
import os
from datetime import datetime
from dotenv import load_dotenv

# ================================
# üîß CONFIGURA√á√ïES
# ================================

# Carregar vari√°veis do arquivo .env do backend
load_dotenv('backend/.env')

# GitHub Personal Access Token (deve estar definido no backend/.env)
GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')

# Verificar se token foi carregado
if not GITHUB_TOKEN:
    print("‚ùå ERRO: GITHUB_TOKEN n√£o encontrado!")
    print("üí° Adicione GITHUB_TOKEN=seu_token no arquivo backend/.env")
    exit(1)

# Configura√ß√µes do reposit√≥rio
GITHUB_USERNAME = 'NineRocksLx'  # Substitua pelo seu username
REPO_NAME = '9-Rocks-Tours'       # Nome do reposit√≥rio
REPO_FULL_NAME = f"{GITHUB_USERNAME}/{REPO_NAME}"

# API URL
API_URL = f"https://api.github.com/repos/{REPO_FULL_NAME}"

def validar_token():
    """Verificar se o token √© v√°lido"""
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}',
        'Accept': 'application/vnd.github.v3+json'
    }
    
    response = requests.get('https://api.github.com/user', headers=headers)
    if response.status_code == 200:
        user_data = response.json()
        print(f"‚úÖ Token v√°lido - Usu√°rio: {user_data.get('login')}")
        return True
    else:
        print(f"‚ùå Token inv√°lido - Status: {response.status_code}")
        return False

def verificar_status_atual():
    """Verificar se o reposit√≥rio √© p√∫blico ou privado"""
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}',
        'Accept': 'application/vnd.github.v3+json'
    }
    
    response = requests.get(API_URL, headers=headers)
    if response.status_code == 200:
        repo_data = response.json()
        is_private = repo_data.get('private', False)
        visibility = "üîí PRIVADO" if is_private else "üåç P√öBLICO"
        print(f"üìä Status atual: {visibility}")
        
        if not is_private:
            repo_url = repo_data.get('html_url', f'https://github.com/{REPO_FULL_NAME}')
            print(f"üîó URL p√∫blica: {repo_url}")
        
        return is_private
    else:
        print(f"‚ùå Erro ao verificar reposit√≥rio - Status: {response.status_code}")
        return None

def verificar_arquivos_sensiveis():
    """Alertar sobre arquivos sens√≠veis que podem estar expostos"""
    arquivos_perigosos = [
        '.env',
        'backend/.env', 
        'google-calendar-key.json',
        'backend/google-calendar-key.json',
        'config.py',
        'secrets.json'
    ]
    
    print("üö® VERIFICA√á√ÉO DE SEGURAN√áA:")
    print("   Certifique-se que estes arquivos N√ÉO est√£o no reposit√≥rio:")
    for arquivo in arquivos_perigosos:
        print(f"   ‚ùå {arquivo}")
    print("   ‚úÖ Use .gitignore para proteg√™-los")
    
    return input("\nüîí Confirma que arquivos sens√≠veis est√£o protegidos? (s/N): ").lower() == 's'

def abrir_repositorio():
    """Tornar reposit√≥rio p√∫blico"""
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}',
        'Accept': 'application/vnd.github.v3+json',
        'Content-Type': 'application/json'
    }
    
    data = {
        'private': False
    }
    
    print(f"üåç Abrindo reposit√≥rio {REPO_FULL_NAME}...")
    
    response = requests.patch(API_URL, headers=headers, data=json.dumps(data))
    
    if response.status_code == 200:
        repo_data = response.json()
        repo_url = repo_data.get('html_url', f'https://github.com/{REPO_FULL_NAME}')
        
        print("‚úÖ SUCESSO! Reposit√≥rio agora √© P√öBLICO")
        print("üåç Qualquer pessoa pode ver e clonar")
        print(f"üîó URL: {repo_url}")
        print(f"üïê Aberto em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # Log da a√ß√£o
        with open('repo_visibility_log.txt', 'a', encoding='utf-8') as f:
            f.write(f"{datetime.now().isoformat()} - ABERTO (p√∫blico) - {repo_url}\n")
        
        # Gerar links √∫teis
        print("\nüìã LINKS √öTEIS:")
        print(f"   üåê Reposit√≥rio: {repo_url}")
        print(f"   üì• Clone HTTPS: git clone {repo_url}.git")
        print(f"   üìÑ README: {repo_url}#readme")
        
        return True
    else:
        print(f"‚ùå ERRO ao abrir reposit√≥rio - Status: {response.status_code}")
        try:
            error_data = response.json()
            print(f"üí¨ Mensagem: {error_data.get('message', 'Erro desconhecido')}")
        except:
            print(f"üí¨ Response: {response.text}")
        return False

def main():
    print("üåç ABRE REPOSIT√ìRIO - GitHub API")
    print("=" * 50)
    print(f"üìÇ Reposit√≥rio: {REPO_FULL_NAME}")
    print("")
    
    # Verificar token
    if not validar_token():
        print("‚ùå Configure um token v√°lido em GITHUB_TOKEN")
        print("üí° Adicionar no arquivo: backend/.env")
        return
    
    # Verificar status atual
    is_private = verificar_status_atual()
    if is_private is None:
        return
    
    if not is_private:
        print("‚ÑπÔ∏è  Reposit√≥rio j√° √© P√öBLICO")
        resposta = input("ü§î Quer continuar mesmo assim? (s/N): ").lower()
        if resposta != 's':
            print("üö´ Opera√ß√£o cancelada")
            return
    
    # Verifica√ß√£o de seguran√ßa
    if not verificar_arquivos_sensiveis():
        print("üö´ Opera√ß√£o cancelada por seguran√ßa")
        print("üí° Verifique .gitignore e remova arquivos sens√≠veis antes de tornar p√∫blico")
        return
    
    # Confirmar a√ß√£o
    print("\nüö® ATEN√á√ÉO: Esta a√ß√£o ir√°:")
    print("   ‚Ä¢ Tornar o reposit√≥rio P√öBLICO")  
    print("   ‚Ä¢ Qualquer pessoa poder√° ver o c√≥digo")
    print("   ‚Ä¢ Ser√° indexado pelo Google")
    print("   ‚Ä¢ Aparecer√° no seu perfil p√∫blico")
    
    confirmacao = input("\nüåç Confirma abrir o reposit√≥rio? (s/N): ").lower()
    
    if confirmacao == 's':
        if abrir_repositorio():
            print("\nüéâ Reposit√≥rio aberto com sucesso!")
            print("üí° Use 'fecha_repositorio.py' para tornar privado novamente")
            print("üöÄ Agora pode compartilhar o link com recrutadores!")
        else:
            print("\nüí• Falha ao abrir reposit√≥rio")
    else:
        print("üö´ Opera√ß√£o cancelada pelo usu√°rio")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüö´ Opera√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"\nüí• Erro inesperado: {e}")

# ================================
# üìã INSTRU√á√ïES DE USO:
# ================================
#
# 1. Criar Personal Access Token:
#    GitHub > Settings > Developer settings > Personal access tokens > Generate new token
#    Selecionar scope: 'repo' (Full control of private repositories)
#
# 2. Configurar token no backend/.env:
#    GITHUB_TOKEN=seu_token_aqui
#
# 3. Configurar username e repo name nas vari√°veis acima
#
# 4. IMPORTANTE: Verificar .gitignore antes de abrir!
#    Certifique-se que .env e google-calendar-key.json n√£o est√£o commitados
#
# 5. Instalar depend√™ncia:
#    pip install python-dotenv
#
# 6. Executar:
#    python abre_repositorio.py
#
# 7. Confirmar a a√ß√£o quando solicitado
#
# ‚ö†Ô∏è  CR√çTICO: Sempre verificar arquivos sens√≠veis antes de tornar p√∫blico!